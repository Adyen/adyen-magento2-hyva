<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\HyvaCsp;
use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;

/** @var Template $block */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */
/** @var HyvaCsp $hyvaCsp */

?>
<script>
function adyenPaymentMethodRendererAdyenCcVaultMethod() {

    const dataset = this.$el.dataset;

    window.addEventListener('checkout:payment:method-list-boot', async (event) => {
        unmountAdyenComponent();
        await init(event.detail.method);
    });

    window.addEventListener('checkout:payment:method-activate', async (event) => {
        await init(event.detail.method);
    });

    async function init(cardLayoutId) {
        try {
            let wire = Magewire.find(cardLayoutId);
            wire.refreshProperties()
                .then(() => {
                    let magewireMethodCode = dataset.methodCode;

                    let creditCardHandler = new componentHandler(
                        magewireMethodCode,
                        wire,
                        cardLayoutId + '_ActionContainer'
                    );

                    window.AdyenPaymentHandler = creditCardHandler;

                    if (magewireMethodCode !== 'adyen_cc') {
                        creditCardHandler.renderMethodUnavailableMessage();
                        return;
                    }

                    if (wire.get('requiresShipping')) {
                        creditCardHandler.renderMessage("<?= $escaper->escapeJs(__('Please select shipping method.')) ?>");
                    } else {
                        let rawResponse = wire.get('paymentResponse');
                        let paymentMethods = JSON.parse(rawResponse);
                        creditCardHandler.setPublicHash(dataset.publicHash);

                        let creditCardConfiguration = {
                            type: "card",
                            hideCVC: dataset.hideCvc === 'true',
                            brand: dataset.brand,
                            storedPaymentMethodId: dataset.gatewayToken,
                            expiryMonth: dataset.expiryMonth,
                            expiryYear: dataset.expiryYear,
                            onChange: function (state, component) {
                                if (!state.isValid) {
                                    hyvaCheckout.navigation.disableButtonPlaceOrder();
                                } else {
                                    creditCardHandler.clearMessage();
                                    hyvaCheckout.navigation.enableButtonPlaceOrder();
                                }
                            },
                            installmentOptions: JSON.parse(dataset.formattedInstallmentsJson),
                            showInstallmentAmounts: true,
                            onBrand: function (state) {
                                creditCardHandler.setCreditCardType(creditCardHandler.getCcCodeByAltCode(dataset.brand));
                            }
                        }

                        creditCardHandler.activateVaultMethod(cardLayoutId, creditCardConfiguration, paymentMethods);
                        showPrimaryButton();
                    }
                }).catch(() => {
                console.log('Error occurred during vault component load')
            });
        } catch (e) {
        }
    }

    return {};
}
window.addEventListener('alpine:init', () => Alpine.data('adyenPaymentMethodRendererAdyenCcVaultMethod', adyenPaymentMethodRendererAdyenCcVaultMethod), {once: true});
</script>
<?php $hyvaCsp->registerInlineScript() ?>