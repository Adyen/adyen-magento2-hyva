<?php

/** @var ApplePay $magewire */
/** @var Template $block */
/** @var Escaper $escaper */

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use Adyen\Hyva\Magewire\Payment\Method\ApplePay;

?>

<div>
    <div id="ApplePayActionContainer" wire:ignore></div>

    <script>
        class applePayComponentHandler extends componentHandler {
            buildConfiguration (paymentMethod, paymentMethodsExtraInfo) {
                let baseComponentConfiguration = super.buildConfiguration(paymentMethod, paymentMethodsExtraInfo);

                let applePayConfiguration = Object.assign(baseComponentConfiguration, paymentMethodsExtraInfo[paymentMethod.type].configuration);
                applePayConfiguration.showPayButton = true;
                applePayConfiguration.totalPriceLabel = baseComponentConfiguration.configuration.merchantName;
                applePayConfiguration.code = "adyen_applepay";

                return applePayConfiguration
            }
        }

        window.adyenActiveEvents.forEach(async (element) => {
            window.addEventListener(element, async () => {
                let applePayHandler = await init();

                if (applePayHandler) {
                    let wire = applePayHandler.getWire();
                    wire.processIsShippingRequired()
                        .then(() => {
                            if (wire.get('requiresShipping')) {
                                applePayHandler.renderMessage('Please select shipping method.');
                            } else {
                                activateApplePay(applePayHandler);
                                window.dispatchEvent(new CustomEvent('wallet-method-active', {detail: {method: '<?= $escaper->escapeJs($magewire->getMethodCode()) ?>'}}));
                            }
                        });
                }
            })
        });

        async function init() {
            try {
                let wire = Magewire.find('checkout.payment.method.adyen_applepay');
                let applePayHandler = new applePayComponentHandler(
                    '<?= $escaper->escapeJs($magewire->getMethodCode()) ?>',
                    wire,
                    'ApplePayActionContainer'
                );

                return applePayHandler;
            } catch (e) {
                return null;
            }
        }

        async function activateApplePay(applePayHandler) {
            let paymentMethodResponse = <?= /* @noEscape */ $magewire->getPaymentResponse() ?>.paymentMethodsResponse;
            let applePayMethodConfiguration = null;

            for (let i = 0; i < paymentMethodResponse.paymentMethods.length; i++) {
                if (paymentMethodResponse.paymentMethods[i].type == 'applepay') {
                    applePayMethodConfiguration = paymentMethodResponse.paymentMethods[i];
                    break;
                }
            }

            if (applePayMethodConfiguration !== null) {
                let paymentMethodsExtraInfo = <?= /* @noEscape */ $magewire->getPaymentResponse() ?>.paymentMethodsExtraDetails;

                let configuration = applePayHandler.buildConfiguration(applePayMethodConfiguration, paymentMethodsExtraInfo);
                let component = await applePayHandler.buildComponent(
                    <?= /* @noEscape */ $magewire->getPaymentResponse() ?>.paymentMethodsResponse,
                    function (result) {
                        applePayHandler.handleAdditionalDetails(result.data)
                    },
                    function (result) {},
                    function (state) {
                        applePayHandler.placeOrder(state.data);
                    }
                );

                applePayHandler.mountComponent(component, applePayMethodConfiguration.type, configuration);
            } else {
                applePayHandler.renderMessage("<?= __("We are sorry, this method is temporarily unavailable") ?>");
            }
        }
    </script>
</div>
