<?php
/** @var StoredCards $magewire */
/** @var Escaper $escaper */

use Magento\Framework\Escaper;
use Adyen\Hyva\Api\Data\StoredCreditCardInterface;
use Adyen\Hyva\Api\ProcessingMetadataInterface;
use Adyen\Hyva\Magewire\Payment\Method\StoredCards;
use Magewirephp\Magewire\Component;

/** @var Component $magewire */
$magewire = $this->getData(ProcessingMetadataInterface::BLOCK_PROPERTY_MAGEWIRE);
/** @var StoredCreditCardInterface $storedCard */
$storedCard = $this->getData(ProcessingMetadataInterface::BLOCK_PROPERTY_STORED_CARD);
?>

<div>
    <?php if ($storedCard):?>
        <div id="<?= $escaper->escapeHtmlAttr($storedCard->getLayoutId()) ?>_ActionContainer" wire:ignore></div>

        <script>
            window.dispatchEvent(new Event('cc-method-active'));

            window.addEventListener('checkout:payment:method-activate', async () => {
                let creditCardHandler = await init();

                if (creditCardHandler) {
                    await activateCc(creditCardHandler);
                    window.dispatchEvent(new CustomEvent('cc-method-active', {detail: {method: '<?= $escaper->escapeJs($magewire->getMethodCode()) ?>'}}));
                }
            });

            async function init() {
                try {
                    let wire = Magewire.find('<?= $escaper->escapeJs($storedCard->getLayoutId()); ?>');
                    let creditCardHandler = new componentHandler(
                        '<?= $escaper->escapeJs($magewire->getMethodCode()) ?>',
                        wire,
                        '<?= $escaper->escapeJs($storedCard->getLayoutId()) ?>_ActionContainer'
                    );

                    return creditCardHandler;
                } catch (e) {
                    return null;
                }
            }

            async function activateCc(creditCardHandler) {
                creditCardHandler.setPublicHash('<?= $escaper->escapeJs($storedCard->getPublicHash()) ?>');

                let creditCardConfiguration = {
                    type: "card",
                    hideCVC: <?= $escaper->escapeJs($magewire->getConfiguration()->getValue('adyenCc/requireCvc')) ? 'false' : 'true' ?>,
                    brand: '<?= $escaper->escapeJs($storedCard->getType()) ?>',
                    storedPaymentMethodId: '<?= $escaper->escapeJs($storedCard->getGatewayToken()) ?>',
                    expiryMonth: '<?= $escaper->escapeJs($storedCard->getExpiryMonth()) ?>',
                    expiryYear: '<?= $escaper->escapeJs($storedCard->getExpiryYear()) ?>',
                    onChange: function(state, component) {
                        if (!state.isValid) {
                            hyvaCheckout.navigation.disableButtonPlaceOrder();
                        } else {
                            creditCardHandler.clearMessage();
                            hyvaCheckout.navigation.enableButtonPlaceOrder();
                        }
                    },
                    installmentOptions: <?= $magewire->getFormattedInstallments() ?>,
                    showInstallmentAmounts: true,
                    onBrand: function(state) {
                        creditCardHandler.setCreditCardType(creditCardHandler.getCcCodeByAltCode('<?= $escaper->escapeJs($storedCard->getType()) ?>'));
                    }
                }

                let paymentMethodsExtraInfo = <?= /* @noEscape */ $magewire->getPaymentResponse() ?>.paymentMethodsExtraDetails;

                let configuration = creditCardHandler.buildConfiguration(creditCardConfiguration, paymentMethodsExtraInfo);

                let component = await creditCardHandler.buildComponent(
                    <?= /* @noEscape */ $magewire->getPaymentResponse() ?>.paymentMethodsResponse
                );

                creditCardHandler.mountComponent(component, creditCardConfiguration.type, configuration);

                hyvaCheckout.payment.activate('<?= $escaper->escapeJs($storedCard->getLayoutId()) ?>',
                    {
                        async placeOrder() {
                            let stateData = creditCardHandler.getActionComponent().data;
                            let publicHash = creditCardHandler.getPublicHash();
                            creditCardHandler.placeOrder(stateData, publicHash);
                        },
                        placeOrderViaJs() {
                            return true

                        }
                    },
                    document.getElementById("<?= $escaper->escapeJs($storedCard->getLayoutId()) ?>_ActionContainer")
                );
            }
        </script>
    <?php endif; ?>
</div>
