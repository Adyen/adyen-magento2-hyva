<?php

/** @var CreditCard $magewire */
/** @var Template $block */

use Magento\Framework\View\Element\Template;
use Adyen\Hyva\Magewire\Payment\Method\CreditCard;

?>

<div>
    <div id="CreditCardActionContainer" wire:ignore class="w-full max-w-md"></div>
    <div id="InstallmentsContainer">
        <select id="AdyenCcInstallments" class="select" style="visibility: hidden"></select>
    </div>

    <script>
        class creditCardComponentHandler extends componentHandler {
            getAllInstallments() {
                return <?= $magewire->getConfiguration()->getJsonValue('adyenCc/installments') ?>
            }
        }

        window.addEventListener('checkout:payment:method-activate', async () => {
            let creditCardHandler = await init();
            activateCc(creditCardHandler);
        });

        async function init() {
            window.dispatchEvent(new Event('cc-method-active'));

            let wire = Magewire.find('checkout.payment.method.adyen_cc');
            let creditCardHandler = new creditCardComponentHandler(
                '<?= $magewire->getMethodCode() ?>',
                wire,
                'CreditCardActionContainer'
            );

            return creditCardHandler;
        }

        async function activateCc(creditCardHandler) {
            let allInstallments = creditCardHandler.getAllInstallments();

            let creditCardConfiguration = {
                enableStoreDetails: '<?= $magewire->getConfiguration()->isCCEnableStoreDetails($magewire->userIsGuest())?>',
                brands: <?= $magewire->getBrands() ?>,
                hasHolderName: '<?= $magewire->getConfiguration()->getValue('adyen/hasHolderName') ?>',
                holderNameRequired: '<?= $magewire->getConfiguration()->getValue('adyen/holderNameRequired') ?>',
                paymentMethodsResponse: <?= /* @noEscape */ $magewire->getPaymentResponse() ?>.paymentMethodsResponse,
                onChange: function(state, component) {
                    if (!state.isValid) {
                        hyvaCheckout.navigation.disableButtonPlaceOrder();
                    } else {
                        creditCardHandler.clearMessage();
                        hyvaCheckout.navigation.enableButtonPlaceOrder();
                    }
                },
                onBrand: function(state) {
                    creditCardHandler.clearInstallmentsOptions();

                    let wire = creditCardHandler.getWire();
                    let creditCardType = creditCardHandler.getCcCodeByAltCode(state.brand);

                    if (creditCardType) {
                        if (!creditCardHandler.getCreditCardType() ||
                            creditCardHandler.getCreditCardType() &&
                            creditCardHandler.getCreditCardType() != creditCardType)
                        {
                            if (creditCardType in allInstallments) {
                                let cardInstallments = allInstallments[creditCardType];

                                wire.processQuoteParameters(cardInstallments)
                                    .then(() => {
                                        let installmentOptions = JSON.parse(wire.get('installmentOptions'));

                                        if (installmentOptions.length > 1) {
                                            creditCardHandler.addInstallmentOptions(installmentOptions)
                                        }
                                    }).catch(() => {
                                        console.log('Error occurred during installments processing')
                                });
                            }
                        }

                        creditCardHandler.setCreditCardType(creditCardType);
                    } else {
                        creditCardHandler.setCreditCardType('');
                        creditCardHandler.clearInstallmentsOptions();
                    }
                },
                name: "Credit Card",
                type: "card",
                code: '<?= $magewire->getMethodCode() ?>'
            };

            let paymentMethodsExtraInfo = <?= /* @noEscape */ $magewire->getPaymentResponse() ?>.paymentMethodsExtraDetails;

            let configuration = creditCardHandler.buildConfiguration(creditCardConfiguration, paymentMethodsExtraInfo);

            let component = await creditCardHandler.buildComponent(
                <?= /* @noEscape */ $magewire->getPaymentResponse() ?>.paymentMethodsResponse
            );

            creditCardHandler.mountComponent(component, creditCardConfiguration.type, configuration);

            hyvaCheckout.payment.activate('<?= $magewire->getMethodCode() ?>',
                {
                    async placeOrder() {
                        let stateData = creditCardHandler.getActionComponent().data;
                        creditCardHandler.placeOrder(stateData);
                    },
                    placeOrderViaJs() {
                        return true
                    }
                },
                document.getElementById('CreditCardActionContainer')
            );
        }
    </script>
</div>
