<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\HyvaCsp;
use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;

/** @var Template $block */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */
/** @var HyvaCsp $hyvaCsp */

?>
<script>
function adyenPaymentMethodRendererAdyenAmazonpayMethod() {

    const dataset = this.$el.dataset,
        methodCode = 'adyen_amazonpay';

    class amazonPayComponentHandler extends componentHandler {
        constructor(paymentMethodCode, wire, elementLabel) {
            super(paymentMethodCode, wire, elementLabel);

            this.amazonPayStatus = null;
        }

        buildConfiguration (paymentMethod, paymentMethodsExtraInfo) {
            let baseComponentConfiguration = super.buildConfiguration(paymentMethod, paymentMethodsExtraInfo);

            let formattedShippingAddress = {};
            let formattedBillingAddress = {};

            const shippingAddress = this.wire.get('shippingAddress');
            const billingAddress = this.wire.get('billingAddress');

            if (shippingAddress) {
                formattedShippingAddress = this.getFormattedAddress(JSON.parse(shippingAddress));
            }

            if (billingAddress) {
                formattedBillingAddress = this.getFormattedAddress(JSON.parse(billingAddress));
            }

            baseComponentConfiguration.showPayButton = true;
            baseComponentConfiguration.onClick = function(resolve, reject) {
                resolve();
            }

            baseComponentConfiguration.productType = 'PayAndShip';
            baseComponentConfiguration.checkoutMode = 'ProcessOrder';
            let url = new URL(location.href);
            url.searchParams.delete('amazonCheckoutSessionId');
            baseComponentConfiguration.returnUrl = url.href;

            if (formattedShippingAddress &&
                formattedShippingAddress.telephone) {
                baseComponentConfiguration.addressDetails = {
                    name: formattedShippingAddress.firstName +
                        ' ' +
                        formattedShippingAddress.lastName,
                    addressLine1: formattedShippingAddress.street,
                    addressLine2: formattedShippingAddress.houseNumber,
                    city: formattedShippingAddress.city,
                    postalCode: formattedShippingAddress.postalCode,
                    countryCode: formattedShippingAddress.country,
                    phoneNumber: formattedShippingAddress.telephone
                };
                if (baseComponentConfiguration.addressDetails.countryCode === 'US') {
                    baseComponentConfiguration.addressDetails.stateOrRegion = quote.shippingAddress().regionCode
                }
            } else if (formattedBillingAddress &&
                formattedBillingAddress.telephone) {
                baseComponentConfiguration.addressDetails = {
                    name: formattedBillingAddress.firstName +
                        ' ' +
                        formattedBillingAddress.lastName,
                    addressLine1: formattedBillingAddress.street,
                    addressLine2: formattedBillingAddress.houseNumber,

                    city: formattedBillingAddress.city,
                    postalCode: formattedBillingAddress.postalCode,
                    countryCode: formattedBillingAddress.country,
                    phoneNumber: formattedBillingAddress.telephone
                };
                if (baseComponentConfiguration.addressDetails.countryCode === 'US') {
                    baseComponentConfiguration.addressDetails.stateOrRegion = quote.billingAddress().regionCode
                }
            }

            return baseComponentConfiguration;
        }

        mountComponent(checkoutComponent, paymentMethodType, configuration, result = undefined) {
            let self = this;
            const containerId = dataset.containerName + "ActionContainer";

            let url = new URL(location.href);
            // Handles the redirect back to checkout page with amazonSessionKey in url
            // If previous attempt has failed, component is mounted again and session ID is ignored.
            if (this.amazonPayStatus !== false && url.searchParams.has('amazonCheckoutSessionId')) {
                let componentConfig = {
                    amazonCheckoutSessionId: url.searchParams.get('amazonCheckoutSessionId'),
                    showOrderButton: false,
                    amount: {
                        currency: configuration.amount.currency,
                        value: configuration.amount.value
                    },
                    showChangePaymentDetailsButton: false,
                    onSubmit: async (state, amazonPayComponent) => {
                        self.placeOrder(state.data, null, amazonPayComponent);
                    },
                    onError: (error) => {
                        unmountAdyenComponent();
                        super.mountComponent(checkoutComponent, paymentMethodType, configuration, result);
                    }
                }
                try {
                    let amazonPayComponent = checkoutComponent.create(
                        paymentMethodType,
                        componentConfig
                    );

                    amazonPayComponent.mount('#' + containerId);
                    amazonPayComponent.submit();
                } catch (err) {
                    console.log(err);
                }
            } else {
                super.mountComponent(checkoutComponent, paymentMethodType, configuration, result);
            }
        }

        placeOrder(data, publicHash = null, amazonPayComponent) {
            let self = this;
            let wire = self.wire;
            let extensionAttributes = {};

            if (document.querySelectorAll('[wire\\:id="checkout.terms-conditions"]').length) {
                const termsAndConditionIds = Object.keys(Magewire.find('checkout.terms-conditions').get('termAcceptance'));

                if (termsAndConditionIds.length > 0) {
                    extensionAttributes.agreement_ids = termsAndConditionIds;
                }
            }

            wire.placeOrder({
                stateData: data,
                ccType: this.getCreditCardType(),
                publicHash: publicHash,
                extension_attributes: extensionAttributes
            })
                .then(() => {
                    let paymentStatus = JSON.parse(wire.get('paymentStatus'));
                    self.handleAdyenResult(paymentStatus, amazonPayComponent);
                }).catch(() => {
                console.log('Error occurred during order placement')
            });
        }

        handleAdyenResult(responseJSON, amazonPayComponent) {
            let self = this;

            if (responseJSON.isRefused) {
                let message = "<?= $escaper->escapeHtml(__("The Payment is Refused")) ?>";

                this.amazonPayStatus = false;

                self.renderMessage(message);
                setTimeout(() => {
                    self.clearMessage();
                }, 4000);

                amazonPayComponent.handleDeclineFlow();
            } else {
                super.handleAdyenResult(responseJSON);
            }
        }
    }

    async function init() {
        try {
            let wire = Magewire.find('checkout.payment.methods.' + methodCode);
            wire.refreshProperties()
                .then(() => {
                    let amazonPayHandler = new amazonPayComponentHandler(
                        methodCode,
                        wire,
                        dataset.containerName + 'ActionContainer'
                    );

                    window.AdyenPaymentHandler = amazonPayHandler;

                    if (wire.get('requiresShipping')) {
                        amazonPayHandler.renderMessage("<?= $escaper->escapeJs(__('Please select shipping method.')) ?>");
                    } else {
                        let rawResponse = wire.get('paymentResponse');
                        let paymentMethods = JSON.parse(rawResponse);
                        amazonPayHandler.activatePaymentMethod(methodCode, paymentMethods);
                        hidePrimaryButton();
                    }
                }).catch(() => {
                console.log('Error occurred during Amazon Pay component load')
            });
        } catch (e) {
        }
    }

    return {
        init
    };
}
window.addEventListener('alpine:init', () => Alpine.data('adyenPaymentMethodRendererAdyenAmazonpayMethod', adyenPaymentMethodRendererAdyenAmazonpayMethod), {once: true});
</script>
<?php $hyvaCsp->registerInlineScript() ?>